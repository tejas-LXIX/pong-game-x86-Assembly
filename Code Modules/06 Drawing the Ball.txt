STACK SEGMENT PARA STACK ;start by creating a stack segment
	DB 64 DUP (' ') ;fill the stack with 64 empty spaces. 
STACK ENDS

DATA SEGMENT PARA 'DATA' ;segment where we will save our variables
	BALL_X DW 0Ah  ;declaring the ball variables here (x and y posn's of the ball)
	BALL_Y DW 0Ah  ; DW	stands for define word. can store 16 bits of info. we use it because down there,we are using 16 bits registers.
	; DB can only store 8 bits of data.
	BALL_SIZE DW 04h  ;size of the ball. 4 pixels on x(width) and on y(height). so,16 pixels in total.	
DATA ENDS

CODE SEGMENT PARA 'CODE'
	
	MAIN PROC FAR  ;creating our main procedure(main function jaise)
	
	ASSUME CS:CODE,DS:DATA,SS:STACK ; to clearly define the segments of our program.
	;code segment,data segment,stack segment. Assembler assumes that these are called code,data and stack.
	; useful for telling the assembler where to get the variables from(where they have been defined),rather than using random garbage values.
	
	PUSH DS ;push to the stack the DS segment.
	SUB AX,AX  ;clean the AX Register by subtracting it with itself
	PUSH AX ;push ax to the stack
	MOV AX,DATA ;save on the AX Register the contents of the DATA segment
	MOV DS,AX   ;save on the data segment,the contents of AX.
	POP AX   ;release the top item from the stack to the register
	POP AX   
	
		MOV AH,00h ;set the configuration to video mode
		MOV AL,13h  ;choose the video mode. set it to 13h(is a part of provides 256 color graphics)
		INT 10h ; execute the configuration
		
		MOV AH,0Bh ;set the configuration
		MOV BH,00h ;to the background color
		MOV BL,00h ; choose black as background. 00h is the colour code for black
		INT 10h ; execute the configuration
		
		CALL DRAW_BALL
		
		
		RET
	MAIN ENDP

	DRAW_BALL PROC NEAR  ;to define a noew procedure that belongs to the same code segment. the main procedure can call this drawball procedure
		
		MOV CX,BALL_X ;set the initial column (X position) of the pixel to 10
		MOV DX,BALL_Y ;set initial y (row position) position to 10.
		;we draw one pixel in one line till we reach the width of 4. then do the same for each line till we reach 4 again. so,we print 16 pixels(4*4). this is done using the below loop
		DRAW_BALL_HORIZONTAL:
			MOV AH,0Ch ; set the configuration to writing a pixel
			MOV AL,0Fh ; chooose white colour for the pixel
			MOV BH,00h ; set the page number to zero
			INT 10h ;execute the configuration
			
			INC CX  ;CX=CX+1 incrementing the column by 1.			
					;CX - BALL_X > BALL_SIZE (We check this condition. If this occurs,means we have reached the width of the ball,so we reset and go to the next line. If not,then we go to next column)
			MOV AX,CX ;Using an auxiliary register AX so that we dont lose the current values.
			SUB AX,BALL_X ;This difference increases with each iteration. This Diff is stored in AX.
			CMP AX,BALL_SIZE ;comparing the two values
			JNG DRAW_BALL_HORIZONTAL ;JUMP,if NOT GREATER. if AX is not greater than ballsize,then loop this again.
			;this basically draws the columns.
			
			;if it reaches the below lines,means that AX became greater than ball_size. so,now we have to go to the next line and do this again.
			MOV CX,BALL_X ;resetting the column value to initial x position of the ball. CX register goes back to the initial column
			INC DX ;move to the next line
					;DX - BALL_Y > BALL_SIZE(to check if we have reached the final line).If true,then we exit this procedure. otherwise,we move to next line.
			MOV AX,DX
			SUB AX,BALL_Y
			CMP AX,BALL_SIZE
 			JNG DRAW_BALL_HORIZONTAL
					
			
		RET   ;to exit this procedure
	DRAW_BALL ENDP  ;denotes the end of this procedure
	
CODE ENDS
END